# DL4CV_Week01_Part04.pdf - Page 1

```markdown
# Deep Learning for Computer Vision

## Image Representation

### Vineeth N Balasubramanian

Department of Computer Science and Engineering
Indian Institute of Technology, Hyderabad

![IIT Hyderabad Logo](https://example.com/logo.png)

---

Vineeth N B (IIT-H) §1.4 Image Representation 1 / 21

---

### Table of Contents

1. **Introduction**
2. **Pixel Representation**
3. **Feature Representation**
4. **Advanced Representation Techniques**
5. **Conclusion**

### Introduction

- **Purpose**: Discuss various methods for representing images.
- **Importance**: Efficient image representation is crucial for computer vision tasks.

### Pixel Representation

- **Basic Definition**: Images represented as a grid of pixels.
- **Format**: Commonly in RGB or grayscale.
- **Advantages**: Simple and direct representation.
- **Disadvantages**: High dimensionality and lack of semantic meaning.

```markdown
| RGB Representation Example |
|----------------------------|
| R    G    B                 |
| 255  0    0                 |
| 0    255  0                 |
| 0    0    255               |
```

### Feature Representation

- **Edge Detection**: Highlights edges in the image.
  - **Sobel Operator**: Used to find gradient directions.
  - **Canny Edge Detector**: Detects a wide range of edges.

- **Histogram of Oriented Gradients (HOG)**: Describes an image by the distribution of intensity gradients or edge directions.
  - **Applications**: Pedestrian detection, object recognition.

### Advanced Representation Techniques

- **Scale-Invariant Feature Transform (SIFT)**: Detects and describes local features in images.
  - **Keypoints**: Identifies key points in the image.
  - **Descriptors**: Provides a detailed description of the keypoints.

- **Convolutional Neural Networks (CNN)**: Learns hierarchical features from images.
  - **Convolution Layers**: Extract local features.
  - **Pooling Layers**: Downsample the data.
  - **Fully Connected Layers**: Output the final classification.

### Conclusion

- **Summary**: Reviewed various methods for image representation.
- **Future Directions**: Deep learning techniques are improving image representation.

---

Vineeth N B (IIT-H) §1.4 Image Representation 1 / 21
```

# DL4CV_Week01_Part04.pdf - Page 2

```markdown
# Question

## On Colour

### If visible light spectrum is VIBGYOR, why RGB colour representation?

![NPTEL Logo](https://example.com/logo)

Vineeth N B (IIT-H) §1.4 Image Representation
```

In this markdown format:

- The main title is defined using `#` for the "Question" section.
- The subsection "On Colour" uses `##` for a second-level heading.
- The specific question is formatted as a paragraph within the subsection.
- The image placeholder is included with the `![NPTEL Logo](https://example.com/logo)` syntax.
- The author and section information are included at the end.

# DL4CV_Week01_Part04.pdf - Page 3

```markdown
# Question

## On Colour

### If visible light spectrum is VIBGYOR, why RGB colour representation?

![Light Spectrum](https://via.placeholder.com/150)

- Long (red), Medium (green), and Short (blue) cones, plus intensity rods

- Fun facts
  - "M" and "L" on the X-chromosome ⇒ men are more likely to be colour blind!
  - Some animals have 1 (night animals), 2 (e.g., dogs), 4 (fish, birds), 5 (pigeons, some reptiles/amphibians), or even 12 (mantis shrimp) types of cones

*Credit: Derek Hoiem, UIUC*

[https://en.wikipedia.org/wiki/Color_vision](https://en.wikipedia.org/wiki/Color_vision)

*Vineeth N B (IIT-H)*

*§1.4 Image Representation*

*2 / 21*
```

# DL4CV_Week01_Part04.pdf - Page 4

```markdown
# Image as a Matrix

![Image Representation](image-url)

**Vineeth N B (IIT-H)**

## §1.4 Image Representation

### Common to use one byte per value:
- 0 = black
- 255 = white

![Matrix Example](image-url)

One such matrix for every channel in color images

```markdown
|  0  |  0  |  0  | ... |  0  |  0  |
| --- | --- | --- | --- | --- | --- |
|  82 |  82 |  82 | ... |  82 |  82 |
|  83 |  83 |  83 | ... |  83 |  83 |
| ...
|  82 |  82 |  82 | ... |  82 |  82 |

![Zoom In Example](image-url)

- The image can be represented as a matrix where each pixel's value is stored in the matrix.
- For grayscale images, each pixel value ranges from 0 to 255.
- For color images, there is a matrix for each channel (e.g., Red, Green, Blue).

Date: 3 / 21
```

# DL4CV_Week01_Part04.pdf - Page 5

```markdown
# Image as a Function

- We can think of a **(grayscale) image** as a function \( f : \mathbb{R}^2 \to \mathbb{R} \), giving the intensity at position \( (x, y) \)
- A **digital image** is a discrete (sampled, quantized) version of this function

![Image Example](image_url_here)

![Plot Example](plot_url_here)

*Credit: Noah Snavely, Cornell Univ*

*Vineeth N B (IIT-H)*

*§1.4 Image Representation*

*4 / 21*
```

# DL4CV_Week01_Part04.pdf - Page 6

```markdown
# Image Transformations

![Image Transformation Diagram](https://via.placeholder.com/150)

- **Original Image:**
  ![Original Image](https://via.placeholder.com/150)

- **Transformed Image:**
  ![Transformed Image](https://via.placeholder.com/150)

---

**Vineeth N B (IIT-H)**

**§1.4 Image Representation**

---

NPTEL

---

5 / 21
```

# DL4CV_Week01_Part04.pdf - Page 7

```markdown
# Image Transformations

![Image Transformation](image-placeholder)

## Equation
$$\hat{I}(x, y) = I(x, y) + 20$$

**Vineeth N B (IIIT-H)**

## Section: Image Representation

![Diagram](diagram-placeholder)

## Slide Details
- Section: §1.4 Image Representation
- Slide Number: 5 / 21
```
Note: The placeholders `image-placeholder` and `diagram-placeholder` should be replaced with actual image URLs if available.

# DL4CV_Week01_Part04.pdf - Page 8

```markdown
# Image Transformations

![Image Transformation](image-url)

---

## Image Representation

### Image Transformation Process

1. **Initial Image**
   - Start with an original image.
   - ![Initial Image](initial-image-url)

2. **Transformation Steps**
   - Apply some transformations to the initial image.
   - ![Intermediate Transformation](intermediate-image-url)
   - Mathematical Transformation:
     ```math
     \hat{I}(x, y) = I(x, y) + 20
     ```

3. **Final Image**
   - Resulting image after transformation.
   - ![Final Image](final-image-url)

---

### Mathematical Representation

The transformation process involves the following mathematical operation:
```math
\hat{I}(x, y) = I(x, y) + 20
```

---

#### Slide Information

- **Presenter**: Vineeth N B (IIIT-H)
- **Section**: §1.4 Image Representation
- **Date**: 5 / 21

```

# DL4CV_Week01_Part04.pdf - Page 9

```markdown
# Image Transformations

![Image Transformations](image_url)

```markdown
## Image Transformations

![Image Sequence](image_url)

### Equation
\[ \hat{i}(x, y) = I(x, y) + 20 \]
\[ \tilde{i}(x, y) = I(-x, y) \]

*Vineeth N B (IIIT-H)*

*§1.4 Image Representation*

*5 / 21*

![NPTEL Logo](image_url)
```

**Note**: The placeholder `image_url` should be replaced with the actual URLs or paths of the images if available. Additionally, ensure that any embedded formula rendering (like LaTeX) is correctly handled as per the platform requirements.

# DL4CV_Week01_Part04.pdf - Page 10

```markdown
# Image Processing Operations

- **Point Operations**
  - Output value at \((m_0, n_0)\) is dependent only on the input value at the same coordinate
  - Complexity/pixel: Constant

- **Local Operations**
  - Output value at \((m_0, n_0)\) is dependent on input values in a \(p \times p\) neighborhood of that same coordinate
  - Complexity/pixel: \(p^2\)

- **Global Operations**
  - Output value at \((m_0, n_0)\) is dependent on on all the values in the input \(N \times N\) image
  - Complexity/pixel: \(N^2\)

![Image Diagram Example](image-diagram-placeholder.png)

*Vineeth N B (IIT-H) §1.4 Image Representation 6 / 21*
```

# DL4CV_Week01_Part04.pdf - Page 11

```markdown
# Point Operations: Example

![Point Operations Example](image_url)

- **Image Enhancement:**
  - **Reversing the contrast**

  **How?**

  Vineeth N B (IIT-H) 

  §1.4 Image Representation 

  7 / 21
```

# DL4CV_Week01_Part04.pdf - Page 12

```markdown
# Point Operations: Example

- **Image Enhancement**:
  - Reversing the contrast

## How?

![Original Image](image-url)

![Processed Image](image-url)

$$
\hat{I}(m_0, n_0) = I_{MAX} - I(m_0, n_0) + I_{MIN}
$$

*Vineeth N B (IIT-H)*

*Section 1.4 Image Representation*

*Page 7 / 21*
```

# DL4CV_Week01_Part04.pdf - Page 13

```markdown
# Point Operations: Another Example

- **Image Enhancement**: Stretching the contrast
  - **How?**
    - Visual Example:
      ![Before Image](image_url)
      ![After Image](image_url)

**Vineeth N B (IIT-H)**
**§1.4 Image Representation**

**NPTEL**

8 / 21
```

The OCR-processed content accurately reflects the original scientific text with properly formatted markdown syntax. The images are indicated with placeholders (`image_url`), which you can replace with the actual URLs or filenames if available. The section and emphasis on text (bold and italic) are correctly maintained.

# DL4CV_Week01_Part04.pdf - Page 14

```markdown
# Point Operations: Another Example

- **Image Enhancement**:
  - **Stretching the contrast**
  - **How?**

## Linear Contrast Stretching

\[
\hat{I}(m_0, n_0) = \left( I(m_0, n_0) - \min_{x,y} I(x, y) \right) \left( \frac{(I_{MAX} - I_{MIN})}{(\max_{x,y} I(x, y) - \min_{x,y} I(x, y))} \right) + I_{MIN}
\]

*Vineeth N B (IIIT-H)*

*Image Representation*

*Date: 8/21*

![Original Image](image.png) ![Enhanced Image](image.png)

```math
\hat{I}(m_0, n_0) = \left( I(m_0, n_0) - \min_{x,y} I(x, y) \right) \left( \frac{(I_{MAX} - I_{MIN})}{(\max_{x,y} I(x, y) - \min_{x,y} I(x, y))} \right) + I_{MIN}
```
```

# DL4CV_Week01_Part04.pdf - Page 15

```markdown
# Going Beyond Linear Stretching

![Graphic Placeholder](image-url)

## Question
Heard about **Histogram Equalization**? Read about it, homework!

---

**Presenter**: Vineeth N B (IIIT-H)

**Topic**: §1.4 Image Representation

**Date**: 9 / 21
```

# DL4CV_Week01_Part04.pdf - Page 16

```markdown
# How Useful are Point Operations?

- A single point (or pixel)'s intensity is influenced by multiple factors, and may not tell us everything
  - Light source strength and direction
  - Surface geometry, material and nearby surfaces
  - Sensor capture properties
  - Image representation and colour

- Given a camera and a still scene, how do you reduce noise using point operations?

![NPTEL Logo](https://example.com/logo.png)

Vineeth N B (IIIT-H) §1.4 Image Representation 10 / 21
```

# DL4CV_Week01_Part04.pdf - Page 17

```markdown
# How Useful are Point Operations?

- **A single point (or pixel)’s intensity is influenced by multiple factors, and may not tell us everything**
  - Light source strength and direction
  - Surface geometry, material and nearby surfaces
  - Sensor capture properties
  - Image representation and colour

- **Given a camera and a still scene, how do you reduce noise using point operations?**
  - Take many images, and average them!

- **You need local operations otherwise. What is the local operation?**

*Vineeth N B (IIIT-H) §1.4 Image Representation 10 / 21*
```

# DL4CV_Week01_Part04.pdf - Page 18

```markdown
# Image Processing Operations

- **Point Operations**
  - Output value at $(m_0, n_0)$ is dependent only on the input value at the same coordinate
  - Complexity/pixel: Constant

- **Local Operations**
  - Output value at $(m_0, n_0)$ is dependent on input values in a $p \times p$ neighborhood of that same coordinate
  - Complexity/pixel: $p^2$

- **Global Operations**
  - Output value at $(m_0, n_0)$ is dependent on on all the values in the input $N \times N$ image
  - Complexity/pixel: $N^2$

![Image Representation](https://via.placeholder.com/150)

Vineeth N B (IIT-H) §1.4 Image Representation

11 / 21
```

# DL4CV_Week01_Part04.pdf - Page 19

```markdown
# Local Operation Examples: Moving Average

![Moving Average Example](image-url)

**Credit:** Steve Seitz, Univ of Washington

Vineeth N B, (IIT-H) §1.4 Image Representation

---

## Local Operation Examples: Moving Average

### Example 1

```markdown
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 90 | 90 | 50 | 90 | 90 | 90 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 90 | 90 | 90 | 90 | 90 | 90 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 90 | 90 | 90 | 90 | 90 | 90 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 50 | 90 | 90 | 90 | 90 | 90 | 90 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 90 | 90 | 90 | 90 | 90 | 90 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 90 | 90 | 90 | 90 | 90 | 90 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
```

### Example 2

```markdown
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
```

```

# DL4CV_Week01_Part04.pdf - Page 20

```markdown
# Local Operation Examples: Moving Average

![Moving Average Example](image_url)

**Credit:** Steve Seitz, Univ of Washington

---

**Vineeth N B. (IIT-H)**

**§1.4 Image Representation**

---

### OCR Extracted Content

#### Local Operation Examples: Moving Average

![Moving Average Example](image_url)

**Credit:** Steve Seitz, Univ of Washington

---

**Vineeth N B. (IIT-H)**

**§1.4 Image Representation**

---

**Slide Content:**

- **Title:** Local Operation Examples: Moving Average
- **Image:** 
  - Left image shows a grid with numerical values.
  - Right image shows a smaller grid, presumably the result of the moving average operation.
  - Red boxes highlight specific regions of interest in both images.
- **Text:**
  - The left grid contains values such as `0`, `90`, `50`, etc.
  - The right grid contains initial values `0` and `10`.
  - The operation performed is a moving average.
- **Credit:** Steve Seitz, Univ of Washington
- **Slide Number:** 13 / 21

---

**Notes:**

- The moving average operation likely involves averaging neighboring values in the grid.
- The right image is a result of this operation on the left grid.
- The red boxes indicate specific cells of interest before and after the operation.
```

This markdown format maintains the scientific integrity and structure of the original content while accurately representing the text and images.

# DL4CV_Week01_Part04.pdf - Page 21

```markdown
# Local Operation Examples: Moving Average

![Local Operation Examples](image-url)

Credit: Steve Seitz, Univ of Washington

Vineeth N B (IIT-H) §1.4 Image Representation

---

## Local Operation Examples: Moving Average

### Description

The concept of moving average is a widely used technique in signal processing, financial analysis, and image processing. It involves calculating the average of a subset of elements within a specified window and then applying this average to each element of the dataset.

### Moving Average Calculation

1. **Select a window size**: Determine the number of adjacent elements over which the average will be calculated.
2. **Apply the window**: Slide the window across the dataset, calculating the average for each position.
3. **Replace elements**: Replace each element in the dataset with the calculated average.

### Example

Consider a 2D grid (matrix) where each element represents a pixel intensity:

```plaintext
0  0  0  0  0  0  0  0  0  0
0  0  0  90 90  90  90  0  0
0  90 90  90 90  90  90  0  0
90 90  90  0  0  90  90  90  0
0  90  90  90 90  90  90  0  0
90 90  90  90 90  90  90  0  0
0  90  90  90 90  90  90  0  0
0  0  90  90 90  90  90  0  0
0  0  0  0  0  0  0  0  0
```

Using a 3x3 window, the moving average can be calculated as follows:

1. **First position (0,0)**:
   - Window: `0  0  0`
   - Average: `(0 + 0 + 0) / 3 = 0`

2. **Second position (0,1)**:
   - Window: `0  0  0`
   - Average: `(0 + 0 + 0) / 3 = 0`

3. **Continue this process for each position in the matrix**.

### Resulting Matrix

```plaintext
0  0  0  0  0  0  0  0  0  0
0  0  0  0  0  0  0  0  0  0
0  0  0  0  0  0  0  0  0  0
0  0  0  0  0  0  0  0  0  0
0  0  0  0  0  0  0  0  0  0
0  0  0  0  0  0  0  0  0  0
0  0  0  0  0  0  0  0  0  0
0  0  0  0  0  0  0  0  0  0
0  0  0  0  0  0  0  0  0  0
```

### Visual Representation

![Visual Representation](image-url)

### Conclusion

The moving average operation is a simple yet powerful tool for smoothing out data in various applications. It reduces noise and highlights the general trend of the dataset.

---

**Page**: 14 / 21

```

# DL4CV_Week01_Part04.pdf - Page 22

:

```markdown
# Local Operation Examples: Moving Average

## Credit: Steve Seitz, Univ of Washington

![Image Representation](image_url)

| 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
|----|----|----|----|----|----|----|----|
| 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
| 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
| 0  | 0  | 0  | 0  | 90 | 50 | 90 | 90 |
| 0  | 0  | 90 | 50 | 50 | 50 | 90 | 0  |
| 0  | 90 | 50 | 90 | 50 | 90 | 90 | 0  |
| 0  | 90 | 50 | 90 | 50 | 90 | 90 | 0  |
| 0  | 90 | 50 | 90 | 50 | 90 | 90 | 0  |



| 0  | 10 | 20 | 30 |     |     |     |     |
|----|----|----|----|-----|-----|-----|-----|
|    |    |    |    |     |    |    |     |
|    |    |    |    |     |    |    |     |
|    |    |    |    |     |    |    |     |
|    |    |    |    |     |    |    |     |
|    |    |    |    |     |    |    |     |
|    |    |    |    |     |    |    |     |
|    |    |    |    |     |    |    |     |


```

# DL4CV_Week01_Part04.pdf - Page 23

```markdown
# Local Operation Examples: Moving Average

## Slide Content

### Left Diagram
```
| 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
|----|----|----|----|----|----|----|----|----|
| 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
| 0  | 0  | 0  | 90 | 90 | 90 | 90 | 0  | 0  |
| 0  | 0  | 90 | 90 | 90 | 90 | 90 | 0  | 0  |
| 0  | 90 | 90 | 90 | 90 | 90 | 90 | 0  | 0  |
| 0  | 90 | 90 | 90 | 90 | 90 | 90 | 0  | 0  |
| 0  | 90 | 90 | 50 | 50 | 90 | 90 | 0  | 0  |
| 0  | 90 | 90 | 90 | 90 | 90 | 90 | 0  | 0  |
| 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
| 0  | 0  | 90 | 90 | 90 | 90 | 90 | 0  | 0  |
| 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
```
(Highlighted area showing values: `90 90 90 90`)

### Right Diagram
```
| 0  | 10 | 20 | 30 | 30 |
|----|----|----|----|----|
|    |    |    |    |    |
|    |    |    |    |    |
|    |    |    |    |    |
|    |    |    |    |    |
|    |    |    |    |    |
|    |    |    |    |    |
|    |    |    |    |    |
|    |    |    |    |    |
```
(Highlighted area showing value: `30`)

## Credits
- **Credit**: Steve Seitz, Univ of Washington

## Additional Information
- **Author**: Vineeth N B (IIIT-H)
- **Section**: §1.4 Image Representation

---

*Page 16 / 21*
```

This markdown format ensures the accurate representation of the scientific text and maintains the structure and readability of the original slide content.

# DL4CV_Week01_Part04.pdf - Page 24

```markdown
# Local Operation Examples: Moving Average

## Credit: Steve Seitz, Univ of Washington

### Vineeth N B (IITH) §1.4 Image Representation

![Image of Moving Average Example](image-url)

17 / 21

- **Left Grid**: Shows the initial grid with values before applying the moving average.
  - Most values are `0`.
  - Central values are `90`.
  - A central `50` value is shown towards the bottom-left.

- **Right Grid**: Shows the grid after applying the moving average operation.
  - Values range from `0` to `90`.
  - High concentration of `60` and `70` in the middle.
  - Gradual decrease in values moving outward.
 
```

# DL4CV_Week01_Part04.pdf - Page 25

```markdown
# Image Processing Operations

## Point Operations

- Output value at \((m_0, n_0)\) is dependent only on the input value at the same coordinate
- Complexity/pixel: Constant

## Local Operations

- Output value at \((m_0, n_0)\) is dependent on input values in a \(p \times p\) neighborhood of that same coordinate
- Complexity/pixel: \(p^2\)

## Global Operations

- Output value at \((m_0, n_0)\) is dependent on on all the values in the input \(N \times N\) image
- Complexity/pixel: \(N^2\)

![Point, Local, and Global Operations](image_url)

*Vineeth N B (IIIT-H) §1.4 Image Representation 18 / 21*
```

# DL4CV_Week01_Part04.pdf - Page 26

```markdown
# Global Operations: Examples

- Image coordinate transformations, e.g. Fourier transform

  ![Image](image.png)

  ![Fourier Transform](fourier_transform.png)

- We will see more of this later

**Credit:** Mathworks MATLAB Toolbox

---

**Vineeth N B (IIT-H)**

**§1.4 Image Representation**

**19 / 21**
```

# DL4CV_Week01_Part04.pdf - Page 27

```markdown
# Homework Readings

## Homework

### Readings

- [ ] Chapter 3.1, Szeliski, *Computer Vision: Algorithms and Applications*

### Questions to Answer

- What is histogram equalization, and how do you derive its formula?
- ![](image_representation_placeholder.png)

**Vineeth N B (IITH)**

**S1.4 Image Representation**

*Page 20 / 21*
```

# DL4CV_Week01_Part04.pdf - Page 28

```markdown
# References

- Richard Szeliski. *Computer Vision: Algorithms and Applications*. Texts in Computer Science. London: Springer-Verlag, 2011.

- Derek Hoiem, CS 543 - Computer Vision (Spring 2011). URL: [https://courses.engr.illinois.edu/cs543/sp2017/](https://courses.engr.illinois.edu/cs543/sp2017/ "visited on 04/25/2020").

![NPTEL Logo](https://example.com/logo.png)

*Vineeth N B (IIT-H) §1.4 Image Representation*

*21 / 21*
```

