# DL4CV_Week03_Part01.pdf - Page 1

```markdown
# Deep Learning for Computer Vision

# Feature Matching

**Vineeth N Balasubramanian**

Department of Computer Science and Engineering
Indian Institute of Technology, Hyderabad

![IITH Logo](image_url)

---

Vineeth N B (IITH)

## §3.1 Feature Matching

---

1 / 21
```

(Note: Replace `image_url` with the actual URL or identifier of the IITH Logo if available.)

This markdown format ensures that the structure, titles, and content are accurately represented, maintaining the integrity of the scientific presentation.

# DL4CV_Week03_Part01.pdf - Page 2

```markdown
# Acknowledgements

- Most of this lecture's slides are based on lectures of **Deep Learning for Vision** course taught by Prof Yannis Avrithis at Inria Rennes-Bretagne Atlantique

---

**Vineeth N B (IIT-H)**

### 3.1 Feature Matching

---

Page 2 of 21
```

This markdown format preserves the structure and content while ensuring the accuracy and readability of the scientific text.

# DL4CV_Week03_Part01.pdf - Page 5

```markdown
# Dense Registration through Optical Flow<sup>2</sup>

## One dimension:

![Graph](image_url)

<sup>2</sup>Lucas and Kanade IJCAI 1981. *An Iterative Image Registration Technique With an Application to Stereo Vision.*

Vineeth N B (IIT-H)

### 3.1 Feature Matching

---

![Image](image_url)

```math
g(x) - f(x)
```

```math
g(x)
```

```math
f(x)
```
```

# DL4CV_Week03_Part01.pdf - Page 7

```markdown
# Dense Registration through Optical Flow<sup>2</sup>

- **Error given by:**
  \[
  E(t) = \sum_x w(x) \left( f(x + t) - g(x) \right)^2 \approx \sum_x w(x) \left( f(x) + t^T \Delta f(x) - g(x) \right)^2
  \]

![NPTEL Logo](image_url_here)

<sup>2</sup>Lucas and Kanade IJCAI 1981. *An Iterative Image Registration Technique With an Application to Stereo Vision.*

Vineeth N B (IIT-H)

§3.1 Feature Matching

5 / 21
```

# DL4CV_Week03_Part01.pdf - Page 8

```markdown
# Dense Registration through Optical Flow<sup>2</sup>

- **Error given by:**
  \[
  E(t) = \sum_x w(x) \left( f(x + t) - g(x) \right)^2 \approx \sum_x w(x) \left( f(x) + t^T \Delta f(x) - g(x) \right)^2
  \]

- **Error minimized when gradient vanishes:**
  \[
  \frac{\partial E}{\partial t} = \sum_x w(x) 2 \Delta f(x) \left( f(x) + t^T \Delta f(x) - g(x) \right) = 0
  \]

<sup>2</sup>Lucas and Kanade IJCAI 1981. *An Iterative Image Registration Technique With an Application to Stereo Vision.*

Vineeth N B (IIT-H) §3.1 Feature Matching 5 / 21
```

# DL4CV_Week03_Part01.pdf - Page 10

```markdown
# Dense Registration through Optical Flow<sup>2</sup>

- **Error given by:**
  \[
  E(t) = \sum_x w(x) \left( f(x + t) - g(x) \right)^2 \approx \sum_x w(x) \left( f(x) + t^T \Delta f(x) - g(x) \right)^2
  \]

- **Error minimized when gradient vanishes**
  \[
  \frac{\partial E}{\partial t} = \sum_x w(x) 2 \Delta f(x) \left( f(x) + t^T \Delta f(x) - g(x) \right) = 0
  \]

- **Least-squares solution (ignoring summation and arguments for simplicity):**
  \[
  w \Delta f (\Delta f)^T t = w \Delta f (g - f)
  \]

- **2-D equivalent:** Assume an image patch defined by window \( w \); what is the error between patch shifted by \( t \) in reference image \( f \) and patch at origin in shifted image \( g \)?

<sup>2</sup>Lucas and Kanade IJCAI 1981. An Iterative Image Registration Technique With an Application to Stereo Vision.

*Vineeth N B (IIT-H)* *G3.1 Feature Matching* *5/21*
```

# DL4CV_Week03_Part01.pdf - Page 11

```markdown
# Dense Registration through Optical Flow<sup>2</sup>

- **The Aperture Problem:**

![Aperture Problem Image](image-url)

---

<sup>2</sup> Lucas and Kanade IJCAI 1981. *An Iterative Image Registration Technique With an Application to Stereo Vision.*

Vineeth N B (IIT-H)

**§3.1 Feature Matching**

_5 / 21_
```

# DL4CV_Week03_Part01.pdf - Page 12

```markdown
# Dense Registration through Optical Flow<sup>2</sup>

- **The Aperture Problem:**

![Aperture Problem Diagram](image_url)

<sup>2</sup> Lucas and Kanade IJCAI 1981. *An Iterative Image Registration Technique With an Application to Stereo Vision.*

Vineeth N B (IIT-H)

§3.1 Feature Matching

---

*Date: 5 / 21*
```

# DL4CV_Week03_Part01.pdf - Page 13

```markdown
# Wide Baseline Spatial Matching

- In dense registration, we started from a local “template matching” process and found an efficient solution based on a Taylor approximation

- Both make sense for small displacements

- In wide-baseline matching, every part of one image may appear anywhere in the other

- We start by pairwise matching of local descriptors without any order, and then attempt to enforce some geometric consistency according to a rigid motion model

*Vineeth N B (IIIT-H)*

*§3.1 Feature Matching*

*6 / 21*
```

# DL4CV_Week03_Part01.pdf - Page 14

```markdown
# Wide Baseline Spatial Matching

- In dense registration, we started from a local "template matching" process and found an efficient solution based on a Taylor approximation

- Both make sense for small displacements

- In wide-baseline matching, every part of one image may appear anywhere in the other

- We start by pairwise matching of local descriptors without any order, and then attempt to enforce some geometric consistency according to a rigid motion model

*Vineeth N B (IIIT-H) §3.1 Feature Matching 6 / 21*
```

# DL4CV_Week03_Part01.pdf - Page 16

```markdown
# Wide Baseline Spatial Matching

![Wide Baseline Spatial Matching](image_url)

## Features detected independently in each image

* Credit: Yannis Avrithis, Inria Rennes-Bretagne Atlantique

Vineeth N B. (IIT-H)

### §3.1 Feature Matching

7 / 21
```

# DL4CV_Week03_Part01.pdf - Page 17

```markdown
# Wide Baseline Spatial Matching

![Wide Baseline Spatial Matching](image_url)

**Tentative correspondences by pairwise descriptor matching**

*Credit: Yannis Avrithis, Inria Rennes-Bretagne Atlantique*

*Vineeth N B (IIIT-H)*

*§3.1 Feature Matching*

7 / 21
```

# DL4CV_Week03_Part01.pdf - Page 18

```markdown
# Wide Baseline Spatial Matching

![Wide Baseline Spatial Matching](image_url)

## Subset of correspondences that are ‘inlier’ to a rigid transformation

**Credit:** Yannis Avrithis, Inria Rennes-Bretagne Atlantique

**Vineeth N B (IIT-H)**

**§3.1 Feature Matching**

```

# DL4CV_Week03_Part01.pdf - Page 19

```markdown
# Wide Baseline Spatial Matching

## Descriptor Extraction:

For each detected feature in each image:

- Construct a local histogram of gradient orientations (HoG)
- Find one or more dominant orientations corresponding to peaks in histogram
- Resample local patch at given location, scale, and orientation
- Extract one descriptor for each dominant orientation

*Vineeth N B (IIT-H) §3.1 Feature Matching 8 / 21*
```

# DL4CV_Week03_Part01.pdf - Page 20

```markdown
# Wide Baseline Spatial Matching

## Descriptor Matching:

- For each descriptor in one image, find its two nearest neighbors in the other
- If ratio of distance of first to distance of second is small, make a correspondence
- This yields a list of tentative correspondences

*Vineeth N B (IIIT-H)*

*§3.1 Feature Matching*

*9 / 21*
```

# DL4CV_Week03_Part01.pdf - Page 21

```markdown
# Wide Baseline Spatial Matching

## Ratio Test:

![Ratio Test Graph](image_url)

- **PDF for correct matches**
- **PDF for incorrect matches**

### Ratio of first to second nearest neighbour distance can determine the probability of a true correspondence

*Credit: Yannis Avrithis, Inria Rennes-Bretagne Atlantique
Vineeth N B (IIT-H) §3.1 Feature Matching*

---

**Text Below Image:**
- **X-axis:** Ratio of distances (closest/next closest)
- **Y-axis:** PDF

---

**Note:** The figure displays two probability density functions (PDFs):
- **Solid Line:** PDF for correct matches
- **Dashed Line:** PDF for incorrect matches

**Conclusion:**
The ratio of the first to second nearest neighbour distance can be used to determine the probability of a true correspondence, aiding in the accuracy of spatial matching.

```

# DL4CV_Week03_Part01.pdf - Page 22

```markdown
# Wide Baseline Spatial Matching

## Why is it difficult?

- Should allow for a geometric transformation
- Fitting the model to data (correspondences) is sensitive to outliers: should find a subset of inliers first
- Finding inliers to a transformation requires finding the transformation in the first place
- Correspondences can have gross error
- Inliers are typically less than 50%

*Vineeth N B (IIIT-H)*

*§3.1 Feature Matching*

*11 / 21*
```

# DL4CV_Week03_Part01.pdf - Page 24

# Geometric Transformations

![Geometric Transformation Diagram](image_url)

## Translation: 2 degrees of freedom

$$
\begin{pmatrix}
x' \\ 
y' \\ 
1
\end{pmatrix}
=
\begin{pmatrix}
1 & 0 & t_x \\
0 & 1 & t_y \\
0 & 0 & 1
\end{pmatrix}
\begin{pmatrix}
x \\ 
y \\ 
1
\end{pmatrix}
$$

**Credit:** Yannis Avrithis, Inria Rennes-Bretagne Atlantique

**Vineeth N B (IIT-H)**

**§3.1 Feature Matching**

*13 / 21*

# DL4CV_Week03_Part01.pdf - Page 25

```markdown
# Geometric Transformations

![Geometric Transformations Diagram](image_url)

- **Rotation**: 1 degree of freedom

  \[
  \begin{pmatrix}
  x' \\
  y' \\
  1
  \end{pmatrix}
  =
  \begin{pmatrix}
  \cos \theta & -\sin \theta & 0 \\
  \sin \theta & \cos \theta & 0 \\
  0 & 0 & 1
  \end{pmatrix}
  \begin{pmatrix}
  x \\
  y \\
  1
  \end{pmatrix}
  \]

*Credit: Yannis Avrithis, Inria Rennes-Bretagne Atlantique*

*Vineeth N B (IIT-H)*

§3.1 Feature Matching

NPTEL

13 / 21
```

# DL4CV_Week03_Part01.pdf - Page 26

```markdown
# Geometric Transformations

![Geometric Transformations Diagram](image-placeholder.png)

**Similarity: 4 degrees of freedom**

\[
\begin{pmatrix}
x' \\ 
y' \\ 
1
\end{pmatrix}
=
\begin{pmatrix}
r \cos \theta & -r \sin \theta & t_x \\ 
r \sin \theta & r \cos \theta & t_y \\ 
0 & 0 & 1
\end{pmatrix}
\begin{pmatrix}
x \\ 
y \\ 
1
\end{pmatrix}
\]

*Credit: Yannis Avrithis, Inria Rennes-Bretagne Atlantique*

*Vineeth N B (IIT-H)*

§3.1 Feature Matching

13 / 21
```

# DL4CV_Week03_Part01.pdf - Page 27

```markdown
# Geometric Transformations

![Geometric Transformations Image](image_url)

**Similarity: 4 degrees of freedom**

\[
\begin{pmatrix}
x' \\
y' \\
1
\end{pmatrix}
=
\begin{pmatrix}
r \cos \theta & -r \sin \theta & t_x \\
r \sin \theta & r \cos \theta & t_y \\
0 & 0 & 1
\end{pmatrix}
\begin{pmatrix}
x \\
y \\
1
\end{pmatrix}
\]

*Credit: Yannis Avrithis, Inria Rennes-Bretagne Atlantique*

*Vineeth N B (IIIT-H)*

*§3.1 Feature Matching*

*13 / 21*
```

# DL4CV_Week03_Part01.pdf - Page 28

```markdown
# Geometric Transformations

![Geometric Transformations Diagram](image_url_placeholder)

**Shear: 2 degrees of freedom**

\[
\left(\begin{array}{c}
x' \\ 
y' \\ 
1
\end{array}\right)
=
\left(\begin{array}{ccc}
1 & b_x & 0 \\ 
b_y & 1 & 0 \\ 
0 & 0 & 1
\end{array}\right)
\left(\begin{array}{c}
x \\ 
y \\ 
1
\end{array}\right)
\]

*Credit: Yannis Avrithis, Inria Rennes-Bretagne Atlantique*

*Vineeth N B (IIT-H)*

*§3.1 Feature Matching*

*13 / 21*
```

# DL4CV_Week03_Part01.pdf - Page 29

# Geometric Transformations

![Geometric Transformations](image_url)

**AFFINE: 6 degrees of freedom**

\[
\begin{pmatrix}
x' \\
y' \\
1
\end{pmatrix}
=
\begin{pmatrix}
a_{11} & a_{12} & a_{13} \\
a_{21} & a_{22} & a_{23} \\
0 & 0 & 1
\end{pmatrix}
\begin{pmatrix}
x \\
y \\
1
\end{pmatrix}
\]

*Credit: Yannis Avrithis, Inria Rennes-Bretagne Atlantique*

*Vineeth N B (IIT-H)*

§3.1 Feature Matching

---

13 / 21

# DL4CV_Week03_Part01.pdf - Page 30

```markdown
# Correspondence and Least Squares

- In all cases, the problem is transformed to a linear system **(why?)**

  \[
  \mathbf{A} \mathbf{x} = \mathbf{b}
  \]

  where \(\mathbf{x}\) and \(\mathbf{b}\) contain coordinates of known point correspondences from images \(I\) and \(I'\) respectively, and \(\mathbf{A}\) contains our model parameters.

![NPTEL Logo](https://via.placeholder.com/150)

Vineeth N B (IIT-H) §3.1 Feature Matching 14 / 21
```

# DL4CV_Week03_Part01.pdf - Page 31

```markdown
# Correspondence and Least Squares

- In all cases, the problem is transformed to a linear system (**why?**)
  \[
  \mathbf{A} \mathbf{x} = \mathbf{b}
  \]
  where \(\mathbf{x}\), \(\mathbf{b}\) contain coordinates of known point correspondences from images \(I\), \(I'\) respectively, and \(A\) contains our model parameters.

- We need \(n = \lceil d/2 \rceil\) correspondences, where \(d\) are the degrees of freedom of our model.

*Vineeth N B (IIIT-H) §3.1 Feature Matching 14 / 21*
```

# DL4CV_Week03_Part01.pdf - Page 32

```markdown
# Correspondence and Least Squares

- In all cases, the problem is transformed to a linear system (**why?**)

    \[
    \mathbf{Ax} = \mathbf{b}
    \]

    where \(\mathbf{x}\) and \(\mathbf{b}\) contain coordinates of known point correspondences from images \(I\), \(I'\) respectively, and \(\mathbf{A}\) contains our model parameters

- We need \(n = \left \lceil \frac{d}{2} \right \rceil\) correspondences, where \(d\) are the degrees of freedom of our model

- Let’s take the simplest model as an example: fit a line to two points

*Vineeth N B (IIT-H) §3.1 Feature Matching 14 / 21*
```

# DL4CV_Week03_Part01.pdf - Page 33

```markdown
# Correspondence and Least Squares

![Graph of Correspondence](image_url)

- **clean data, no outliers** : least squares fit ok

**Credit**: Yannis Avrithis, Inria Rennes-Bretagne Atlantique

Vineeth N B (IIIT-H) §3.1 Feature Matching 15 / 21
```

**Note**: Replace `image_url` with the actual URL or file path of the image if required. Ensure that all placeholder text is replaced with the actual data extracted from the OCR process.

# DL4CV_Week03_Part01.pdf - Page 34

```markdown
# Correspondence and Least Squares

![Graph](image_url)

- **clean data, no outliers**: least squares fit ok

**Credit**: Yannis Avrithis, Inria Rennes-Bretagne Atlantique

Vineeth N B (IIT-H) §3.1 Feature Matching 15 / 21
```

# DL4CV_Week03_Part01.pdf - Page 35

```markdown
# Correspondence and Least Squares

![Correspondence and Least Squares image](image-url)

**one gross outlier** - least squares fit fails - what do we do?

Credit: Yannis Avrithis, Inria Rennes-Bretagne Atlantique

Vineeth N B (IIT-H)

## §3.1 Feature Matching

15 / 21
```

# DL4CV_Week03_Part01.pdf - Page 36

```markdown
# Correspondence and Least Squares

![Correspondence Plot](image_url_placeholder)

- **one gross outlier - least squares fit fails - what do we do?**

**Credit:** *Yannis Avrithis, Inria Rennes-Bretagne Atlantique*

_Vineeth N B (IIIT-H)_

## §3.1 Feature Matching

15 / 21
```

In this markdown format, we have maintained the structure and content of the original slide, ensuring that headings, text, and other elements are accurately represented. The placeholders for images and the credit information are included as per the guidelines.

# DL4CV_Week03_Part01.pdf - Page 37

```markdown
# RANSAC (RANdom SAmple Consensus)^3

![Diagram](place_holder_for_diagram_image)

- **Data with Outliers**: pick two points at random - draw line through them - set margin on either side - count inlier points

^3 Fischler and Bolles. CACM 1981. Random Sample Consensus: A Paradigm for Model Fitting With Applications to Image Analysis and Automated Cartography.

Vineeth N B (IIT-H)

## §3.1 Feature Matching

16 / 21
```

# DL4CV_Week03_Part01.pdf - Page 38

```markdown
# RANSAC (RANdom SAmple Consensus)³

![Graph with data points](image_url)

- **data with outliers** - pick two points at random - draw line through them - set margin on either side - count inlier points

³Fischler and Bolles. CACM 1981. Random Sample Consensus: A Paradigm for Model Fitting With Applications to Image Analysis and Automated Cartography.

Vineeth N B (IIT-H)

## §3.1 Feature Matching

16 / 21
```

# DL4CV_Week03_Part01.pdf - Page 39

```markdown
# RANSAC (RANDom SAmple Consensus)³

![Graph with Sample Points](image_url)

- Data with outliers - pick two points at random - draw line through them - set margin on either side - count inlier points

³Fischler and Bolles. CACM 1981. Random Sample Consensus: A Paradigm for Model Fitting With Applications to Image Analysis and Automated Cartography.

Vineeth N B (IIT-H) 

### 3.1 Feature Matching

16 / 21
```

# DL4CV_Week03_Part01.pdf - Page 40

```markdown
# RANSAC (RANdom SAmple Consensus)<sup>3</sup>

![RANSAC Image](image-url)

- Data with outliers - pick two points at random - draw line through them - set margin on either side - count inlier points

<sup>3</sup> Fischler and Bolles. CACM 1981. Random Sample Consensus: A Paradigm for Model Fitting With Applications to Image Analysis and Automated Cartography.

Vineeth N B (IIT-H)

## §3.1 Feature Matching

---

Page 16 / 21
```

# DL4CV_Week03_Part01.pdf - Page 41

```markdown
# RANSAC (RANdom SAmple Consensus)^3

![RANSAC Diagram](image-url)

- data with outliers - pick two points at random - draw line through them - set margin on either side - count inlier points

^3 Fischler and Bolles. CACM 1981. Random Sample Consensus: A Paradigm for Model Fitting With Applications to Image Analysis and Automated Cartography.

Vineeth N B (IIT-H)

## §3.1 Feature Matching

### Page 16 / 21
```

# DL4CV_Week03_Part01.pdf - Page 42

```markdown
# RANSAC (RANdom SAmple Consensus)³

![RANSAC Diagram](image_url)

- **Repeat:** pick two points at random, draw line through them, count inlier points at fixed distance to line, keep best hypothesis so far

³Fischler and Bolles. CACM 1981. Random Sample Consensus: A Paradigm for Model Fitting With Applications to Image Analysis and Automated Cartography.

Vineeth N B (IIT-H) §3.1 Feature Matching

---

16 / 21
```

# DL4CV_Week03_Part01.pdf - Page 43

```markdown
# RANSAC (RANdom SAmple Consensus)<sup>3</sup>

![Diagram](image-url)

- **Repeat**: pick two points at random, draw line through them, count inlier points at fixed distance to line, keep best hypothesis so far

<sup>3</sup>Fischler and Bolles. CACM 1981. Random Sample Consensus: A Paradigm for Model Fitting With Applications to Image Analysis and Automated Cartography.

Vineeth N B (IIT-H)

§3.1 Feature Matching

---

16 / 21
```

# DL4CV_Week03_Part01.pdf - Page 44

```markdown
# RANSAC (RANdom SAmple Consensus)³

![Image of Points and Lines](image_url)

- **Repeat:** pick two points at random, draw line through them, count inlier points at fixed distance to line, keep best hypothesis so far

³Fischler and Bolles. CACM 1981. Random Sample Consensus: A Paradigm for Model Fitting With Applications to Image Analysis and Automated Cartography.

Vineeth N B (IIT-H) §3.1 Feature Matching 16 / 21
```

# DL4CV_Week03_Part01.pdf - Page 45

```markdown
# RANSAC (RANdom SAmple Consensus)^3

![RANSAC Diagram](image_url_here)

- **Repeat:** pick two points at random, draw line through them, count inlier points at fixed distance to line, keep best hypothesis so far

^3 Fischler and Bolles. CACM 1981. Random Sample Consensus: A Paradigm for Model Fitting With Applications to Image Analysis and Automated Cartography.

Vineeth N B (IIT-H) §3.1 Feature Matching 16 / 21
```

# DL4CV_Week03_Part01.pdf - Page 46

```markdown
# RANSAC (RANdom SAmple Consensus)^3

![RANSAC Diagram](image_url)

**Repeat:** pick two points at random, draw line through them, count inlier points at fixed distance to line, keep best hypothesis so far

^3 Fischler and Bolles. CACM 1981. Random Sample Consensus: A Paradigm for Model Fitting With Applications to Image Analysis and Automated Cartography.

Vineeth N B (IIT-H)

## 3.1 Feature Matching

16 / 21
```

# DL4CV_Week03_Part01.pdf - Page 47

```markdown
# RANSAC (RANdom SAmple Consensus)<sup>3</sup>

![RANSAC Diagram](https://via.placeholder.com/600x400)

- **Repeat**: pick two points at random, draw line through them, count inlier points at fixed distance to line, keep best hypothesis so far

<sup>3</sup> Fischler and Bolles. CACM 1981. *Random Sample Consensus: A Paradigm for Model Fitting With Applications to Image Analysis and Automated Cartography*.

Vineeth N B (IIT-H)

## §3.1 Feature Matching

16 / 21
```

# DL4CV_Week03_Part01.pdf - Page 48

```markdown
# RANSAC

- **X**: data (tentative correspondences)
- **n**: minimum number of samples to fit a model
- **s(x; θ)**: score of sample x given model parameters θ
- repeat:
  - hypothesis
    - draw n samples H ⊂ X at random
    - fit model to H, compute parameters θ
  - verification
    - are data consistent with hypothesis? compute score S = ∑_{x∈X} s(x; θ)
    - if S* > S, store solution θ* := θ, S* := S

![RANSAC Diagram](diagram_placeholder.png)

Vineeth N B (IIT-H) §3.1 Feature Matching 17 / 21
```

Note: Replace `diagram_placeholder.png` with the actual image filename if the OCR process can capture the image. If not, this placeholder should suffice for illustrative purposes.

# DL4CV_Week03_Part01.pdf - Page 49

```markdown
# RANSAC: Limitations

- Inlier ratio \( w \) (number of inliers in data / number of points in data) unknown

- Too expensive when minimum number of samples is large (e.g. \( n > 6 \)) and inlier ratio is small (e.g. \( w < 10\% \)): \( 10^6 \) iterations for 1% probability of failure. (How?)

![NPTEL Logo](https://example.com/logo.png)

Vineeth N B. (IIT-H)

Section 3.1 Feature Matching

Slide 18 / 21
```

# DL4CV_Week03_Part01.pdf - Page 50

```markdown
# RANSAC: Limitations

- Inlier ratio \( w \) (number of inliers in data / number of points in data) unknown

- Too expensive when minimum number of samples is large (e.g. \( n > 6 \)) and inlier ratio is small (e.g. \( w < 10\% \)): \( 10^6 \) iterations for 1% probability of failure. (How?)

- \( w^n \rightarrow \) probability that all \( n \) points are inliers

![Image from NPTEL](https://via.placeholder.com/150)

Vineeth N B (IIT-H) §3.1 Feature Matching 18 / 21
```

# DL4CV_Week03_Part01.pdf - Page 51

```markdown
# RANSAC: Limitations

- Inlier ratio \( w \) (number of inliers in data / number of points in data) unknown

- Too expensive when minimum number of samples is large (e.g. \( n > 6 \)) and inlier ratio is small (e.g. \( w < 10\% \)): \( 10^6 \) iterations for 1% probability of failure. (How?)

- \( w^n \rightarrow \) probability that all \( n \) points are inliers

- \( 1 - w^n \rightarrow \) probability that at least one of \( n \) points is an outlier \( \Longrightarrow \) a bad model will be estimated from this point set

![NPTEL Logo](https://via.placeholder.com/150)

Vineeth N B (IIT-H) &section;3.1 Feature Matching 18 / 21
```

# DL4CV_Week03_Part01.pdf - Page 52

```markdown
# RANSAC: Limitations

- **Inlier ratio \( w \) (number of inliers in data / number of points in data) unknown**

- **Too expensive when minimum number of samples is large (e.g. \( n > 6 \)) and inlier ratio is small (e.g. \( w < 10\% \)): \( 10^6 \) iterations for 1% probability of failure. (How?)**

  - \( w^n \rightarrow \) probability that all \( n \) points are inliers

  - \( 1 - w^n \rightarrow \) probability that at least one of \( n \) points is an outlier \( \implies \) a bad model will be estimated from this point set

  - \( (1 - w^n)^k \rightarrow \) probability that algorithm never selects a set of \( n \) points which all are inliers, where \( k \rightarrow \) number of iterations

![Diagram](https://example.com/diagram.png)

Vineeth N B (IIT-H)

§3.1 Feature Matching

18 / 21
```

# DL4CV_Week03_Part01.pdf - Page 53

```markdown
# RANSAC Applications

## Rotation

![Rotation Example](image_url)

*Credit: Aaron Bobick, Washington University in St. Louis*

Vineeth N B (IIT-H)

§3.1 Feature Matching

Page 19 / 21
```

# DL4CV_Week03_Part01.pdf - Page 54

```markdown
# RANSAC Applications

## Estimating transformation matrix (also called fundamental matrix) relating two views

![Transformation Matrix Example](image_url)

**Credit:** [Derek Hoeim, UIUC](https://uiuc.edu)

Vineeth N B (IIT-H)

### §3.1 Feature Matching

---

19 / 21
```

Note: The placeholder `image_url` should be replaced with the actual URL or path of the image if available. If the image cannot be captured via OCR, you can describe it in text form or use a placeholder image. Additionally, ensure that the credit and section details are formatted correctly following the markdown syntax.

# DL4CV_Week03_Part01.pdf - Page 56

```markdown
# Homework

## Readings

- Chapter 4.3, 6.1, Szeliski, *Computer Vision: Algorithms and Applications*
- Papers on the respective slides (for more information)
```

# DL4CV_Week03_Part01.pdf - Page 57

```markdown
# References

- Martin A. Fischler and Robert C. Bolles. "Random Sample Consensus: A Paradigm for Model Fitting with Applications to Image Analysis and Automated Cartography". In: *Commun. ACM* **24.6** (June 1981), 381–395.

- Bruce D. Lucas and Takeo Kanade. "An Iterative Image Registration Technique with an Application to Stereo Vision". In: *Proceedings of the 7th International Joint Conference on Artificial Intelligence - Volume 2. IJCAI'81*. Vancouver, BC, Canada: Morgan Kaufmann Publishers Inc., 1981, 674–679.

- Richard Szeliski. *Computer Vision: Algorithms and Applications*. Texts in Computer Science. London: Springer-Verlag, 2011.

- Avrithis, Yannis, *Deep Learning for Vision* (2018). URL: [sif-dlv.github.io](https://sif-dlv.github.io/) (visited on 05/21/2020).

- Hoiem, Derek, *CS 543 - Computer Vision* (Spring 2011). URL: [courses.engr.illinois.edu/cs543/sp2017/](https://courses.engr.illinois.edu/cs543/sp2017/) (visited on 04/25/2020).

**Note**: The references provided are formatted with proper markdown syntax, including titles, authors, publication information, and URLs. The dates accessed are included to denote when the references were visited.**
```

